name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}

    - name: Create .env.production file
      run: |
        cat > .env.production <<'EOL'
        PROD_DB_CONNECTION=${{ secrets.PROD_DB_CONNECTION }}
        PROD_DISCOVERY_URL=${{ secrets.PROD_DISCOVERY_URL }}
        EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
        EMAIL_FROM=${{ secrets.EMAIL_FROM }}
        EMAIL_SMTP_SERVER=${{ secrets.EMAIL_SMTP_SERVER }}
        EMAIL_SMTP_PORT=${{ secrets.EMAIL_SMTP_PORT }}
        EMAIL_USE_SSL=${{ secrets.EMAIL_USE_SSL }}
        CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
        CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
        CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
        EOL
        
    - name: Add production server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.PRODUCTION_SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: Upload .env.production to server
      run: |
        scp .env.production ${{ secrets.PRODUCTION_SERVER_USER }}@${{ secrets.PRODUCTION_SERVER_HOST }}:${{ secrets.PRODUCTION_DEPLOY_PATH }}/.env.production
        
    - name: Deploy to production server
      run: |
        ssh ${{ secrets.PRODUCTION_SERVER_USER }}@${{ secrets.PRODUCTION_SERVER_HOST }} << 'EOF'
          cd ${{ secrets.PRODUCTION_DEPLOY_PATH }}
          git fetch origin
          git checkout ${{ github.ref_name }}
          git pull origin ${{ github.ref_name }}

          echo "🚀 Starting production deployment..."
          
          # Load environment variables
          set -a
          source .env.production
          set +a
          # Stop and remove existing containers
          docker compose -f docker-compose.yml -f docker-compose.production.yml down --remove-orphans
          
          # Remove old images
          docker image prune -f
          
          # Build and start new containers
          docker compose -f docker-compose.yml -f docker-compose.production.yml --env-file .env.production up -d --build
          
          # Wait for container to be healthy
          echo "⏳ Waiting for container to be healthy..."
          timeout 60s bash -c 'until docker exec trucki-api-production curl -f http://localhost:80/health; do sleep 2; done'
          
          echo "✅ Production deployment completed successfully!"
          echo "🌐 Application is running at: https://api.trucki.co"
        EOF
        
    - name: Verify deployment
      run: |
        sleep 30
        curl -f ${{ secrets.PROD_DISCOVERY_URL }}/health || exit 1
        echo "✅ Production deployment verified successfully!"
        
    - name: Notify team
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          🚀 Production Deployment ${{ job.status }}!
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          URL: ${{ secrets.PROD_DISCOVERY_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}