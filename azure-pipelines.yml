trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'f62901bc-69ac-4508-ad3e-902745253841'  # your service connection ID
  imageRepository: 'truckiapi'
  containerRegistry: 'truckiprodcr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/trucki/Dockerfile'
  tag: '$(Build.BuildId)'  # Use build ID or another custom versioning system

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    # Build and push the Docker image to the container registry
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: UpdateTag
  displayName: Update Image Tag on Web App
  dependsOn: Build  # Ensure the build completes before updating the tag
  jobs:
  - job: UpdateTag
    displayName: Update Web App Deployment Image Tag
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureCLI@2
      displayName: Update web app container image tag
      inputs:
        azureSubscription: 'azdev2containerapps'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Update the web app's container image tag
          az webapp config container set --name trucki \
                                        --resource-group Trucki-Apps-Prod \
                                        --docker-custom-image-name $(containerRegistry)/$(imageRepository):$(tag) \
                                        --docker-registry-server-url https://$(containerRegistry) \
                                        --docker-registry-server-user $(dockerRegistryServiceConnection) \
                                        --docker-registry-server-password $(dockerRegistryServiceConnection)